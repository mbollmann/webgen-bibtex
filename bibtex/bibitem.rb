# -*- encoding: utf-8 -*-

require_relative 'base'

module WebgenBibtex
  class Tag
    module BibItem
      extend WebgenBibtex::Tag::Base

      def self.call(tag, _, context)
        bib, proc = make_objects(tag, context)
        id = context[:config]['tag.bibliography.key']
        render = proc.render(:bibliography, id: id)[0]

        bibitem = bib[id]
        linklist = make_linklist(bibitem, context)
        if !linklist.nil? then
          render_linklist(linklist, bibitem, context, render)
        else
          render
        end
      end

      private

      def self.make_linklist(bibitem, context)
        # Extracts webgen links from a BibTeX item and parses them into a list
        return if bibitem[:webgenlink].nil?
        bibentry = bibitem[:webgenlink]
        linklist = Array.new
        # Multiple links should be separated by ||
        entries = bibentry.include?('||') ? bibentry.split("||") : [bibentry]
        entries.each do |entry|
          # Link title and URL should be separated by |
          if entry.include?("|") then
            title, url = entry.split("|")
          else
            title, url = :link, entry
          end
          linklist.push([title.to_sym, resolve_link(url, context)])
        end
        linklist
      end

      def self.resolve_link(url, context)
        # Resolves a link that is either external, or absolute to the project
        if url.include?("://") # URL has protocol -- leave unchanged
          ''
        else
          dest_node = context.ref_node.resolve(url.to_s, context.dest_node.lang, true)
          if dest_node
            context.website.ext.item_tracker.add(context.dest_node, :node_meta_info, dest_node)
            url = context.dest_node.route_to(dest_node)
          end
        end
        url
      end

      def self.render_linklist(linklist, bibitem, context, render)
        # Augments a rendered bibliography entry with links
        linkstyle = context[:config]['tag.bibliography.link_style']
        if linkstyle == "inline" or linkstyle == "both" then
          url = linklist.shift[1]
          render = add_inline_link(url, bibitem, context, render)
        end
        if linkstyle == "append" or linkstyle == "both" then
          linklist.each do |title,url|
            render += " " + make_appended_link(title, url)
          end
        end
        render
      end

      def self.add_inline_link(url, bibitem, context, render)
        # Adds a link to the bibliography entry's title
        # ---
        # I didn't find any way to mark up the title in the HTML generated by
        # citeproc-ruby, so I'm looking for the title string in the generated
        # output.  This might still break when special characters are involved,
        # we will see.
        title = bibitem[:title].to_s.downcase
        title_start = render.downcase.index(title)
        if title_start.nil? then
          context.website.logger.warn [
            "[webgen-bibtex] couldn't find title in bibliography string; inline link not generated",
            "      title is: #{title}",
            "     render is: #{render.downcase}"
          ]
          render
        else
          render[0, title_start] +
            "<a href=\"" + url + "\">" +
            render[title_start, title.length] +
            "</a>" +
            render[title_start + title.length, 10000]
        end
      end

      def self.make_appended_link(title, url)
        # Make a link to add to the end of the bibliography entry
        return "<a href=\"" + url + "\">" +
               "&#91;" + title.to_s + "&#93;" +
               "</a>"
      end
    end
  end
end
